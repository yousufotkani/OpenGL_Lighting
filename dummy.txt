//application.cpp

################################################view matrix#######################################
glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -10.0f));
			view = glm::rotate(view, r , glm::vec3(0.0f, 1.0f, 0.0f));


			GLfloat radius = 20.0f;
			GLfloat camx = glm::sin(glfwGetTime()) * radius;
			GLfloat camz = glm::cos(glfwGetTime()) * radius;
			glm::mat4 view = glm::lookAt(glm::vec3(camx, 0.0f, camz),
				glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f));

###################################################entire code for cube traversal with camera#####################################
#include<GL/glew.h>
#include<GLFW/glfw3.h>

#include"glm/glm.hpp"
#include"glm/gtc/matrix_transform.hpp"
#include"imgui/imgui.h"
#include"imgui/imgui_impl_glfw.h"
#include"imgui/imgui_impl_opengl3.h"

#include<iostream>
#include<fstream>
#include<string>
#include<sstream>

#include"Renderer.h"
#include"VertexBuffer.h"
#include"IndexBuffer.h"
#include"VertexArray.h"
#include"VertexBufferLayout.h"
#include"Shader.h"
#include"Texture.h"
#include"Camera.h"

#define SCREEN_WIDTH 1920
#define SCREEN_HEIGHT 1080


using namespace std;

void processInput(GLFWwindow* window);
void mouseCallback(GLFWwindow* window, double xpos, double ypos);
void scrollCallback(GLFWwindow* window, double xoffset, double yoffset);

Camera camera(glm::vec3(0.0f,0.0f,3.0f));
bool firstMouse = false;
double lastX = SCREEN_WIDTH / 2.0f;
double lastY = SCREEN_HEIGHT / 2.0f;


int main() {
	//******************************BOILER PLATE**************************
	if (!glfwInit()) {
		cout << "GLFW Initialization Failed!" << endl;
		return -1;
	}

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);

	
	GLFWwindow* window;
	window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Yousuf Window", NULL, NULL);
	if (!window) {
		glfwTerminate();
		return -1;
	}
	glfwSwapInterval(1);

	glfwMakeContextCurrent(window);

	if (glewInit() != GLEW_OK) {
		cout << "GLEW Initialization Failed!" << endl;
		return -1;
	}

	cout << "OPENGL Version : " << glGetString(GL_VERSION) << endl;


	//******************************BOILER PLATE***************************
	GLfloat positions[] = {
		//-0.5f ,-0.5f,	 1.0f, 0.0f, 0.0f,	0.0f, 0.0f,		//0
		// 0.5f ,-0.5f,	 0.0f, 1.0f, 0.0f,	1.0f, 0.0f,		//1
		// 0.5f , 0.5f,	 0.0f, 0.0f, 1.0f,	1.0f, 1.0f,		//2
		//-0.5f , 0.5f,	 1.0f, 0.0f, 0.0f,	0.0f, 1.0f		//3

	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f
	};

	unsigned int indices[] = {
		0,1,2,
		2,3,0
	};


	VertexArray cubeVAO;
	VertexBuffer vb(positions, 6 * 5 * 6 * sizeof(float));
	VertexBufferLayout layout;
	layout.Push<float>(3);
	//layout.Push<float>(3);
	layout.Push<float>(2);
	cubeVAO.AddBuffer(vb,layout);
	IndexBuffer ib(indices, 2 * 3);
	MyShader shader("resources/shaders/test2.shader");
	shader.Bind();

	//shader.SetUniform4f("u_Color", 0.2f, 0.0f, 0.8f, 1.0f);

	Texture tex("resources/textures/container.jpg",GL_RGB,0);
	tex.Bind();
	shader.SetUniform1i("samplerTexture1", 0);
	Texture tex2("resources/textures/awesomeface.png",GL_RGBA,4);
	tex2.Bind(1);
	shader.SetUniform1i("samplerTexture2", 1);

	shader.UnBind();
	cubeVAO.Unbind();
	vb.Unbind();
	ib.Unbind();

	glm::vec3 cubePositions[] = {
		glm::vec3(0.0f,  0.0f,  0.0f),
		glm::vec3(2.0f,  5.0f, -15.0f),
		glm::vec3(-1.5f, -2.2f, -2.5f),
		glm::vec3(-3.8f, -2.0f, -12.3f),
		glm::vec3(2.4f, -0.4f, -3.5f),
		glm::vec3(-1.7f,  3.0f, -7.5f),
		glm::vec3(1.3f, -2.0f, -2.5f),
		glm::vec3(1.5f,  2.0f, -2.5f),
		glm::vec3(1.5f,  0.2f, -1.5f),
		glm::vec3(-1.3f,  1.0f, -1.5f)
	};

	camera.initMouse(window);
	glfwSetCursorPosCallback(window, mouseCallback);
	glfwSetScrollCallback(window, scrollCallback);

	GLfloat r = 0.0f;
	GLfloat increment = 0.005f;

	glEnable(GL_DEPTH_TEST);

	while (!glfwWindowShouldClose(window)) {
		processInput(window);
		
		camera.getDeltaTimeStamp();

		GLCALL(glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT));
		

		for (int i = 0;i < 10;i++) {

			
			glm::mat4 trans = glm::mat4(1.0f);
			trans = glm::translate(trans, cubePositions[i]);
			GLfloat angle = 20.0f;
			trans = glm::rotate(trans, i * angle, glm::vec3(0.5f, 1.0f, 0.0f));

			glm::mat4 model = trans;
			glm::mat4 view = camera.getViewMatrix();
			glm::mat4 proj = glm::perspective(glm::radians(camera.zoom), (GLfloat)SCREEN_WIDTH / (GLfloat)SCREEN_HEIGHT, 0.1f, 100.0f);

			glm::mat4 mvp = proj * view * model;

			shader.Bind();
			cubeVAO.Bind();
			tex.Bind();
			vb.Bind();
			//ib.Bind();
			shader.SetUniformMat4fv("u_MVP", mvp);
			//shader.SetUniform4f("u_Color", r, 0.0f, 0.3f, 1.0f);

			GLCALL(glDrawArrays(GL_TRIANGLES, 0, 36));

		}


		//GLCALL(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0));

		if (r < 1.0f) {
			r = r - increment;
		}
		else if (r < -1.0f)
			r = r + increment;


		glfwSwapBuffers(window);
		glfwPollEvents();
	}


	glfwTerminate();
	return 0;

}

void processInput(GLFWwindow * window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
	camera.processWindowKeys(window);
}



void mouseCallback(GLFWwindow* window, double xpos, double ypos) {
	if (firstMouse) {            //for the first time to handle sudden jump
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}
	//now identify the offset since last  mouse change happened
	double xoffset = xpos - lastX;
	double yoffset = lastY - ypos;        //reversed since y coord go from bottom to top
	lastX = xpos;
	lastY = ypos;

	camera.processOffsetMovement(xoffset, yoffset);
}

void scrollCallback(GLFWwindow* window, double xoffset, double yoffset) {
	camera.processOffsetScroll(yoffset);
}

########################################cube with lighting###########################
#include<GL/glew.h>
#include<GLFW/glfw3.h>

#include"glm/glm.hpp"
#include"glm/gtc/matrix_transform.hpp"
#include"imgui/imgui.h"
#include"imgui/imgui_impl_glfw.h"
#include"imgui/imgui_impl_opengl3.h"

#include<iostream>
#include<fstream>
#include<string>
#include<sstream>

#include"Renderer.h"
#include"VertexBuffer.h"
#include"IndexBuffer.h"
#include"VertexArray.h"
#include"VertexBufferLayout.h"
#include"Shader.h"
#include"Texture.h"
#include"Camera.h"

#define SCREEN_WIDTH 1920
#define SCREEN_HEIGHT 1080


using namespace std;

void processInput(GLFWwindow* window);
void mouseCallback(GLFWwindow* window, double xpos, double ypos);
void scrollCallback(GLFWwindow* window, double xoffset, double yoffset);

Camera camera(glm::vec3(0.0f,0.0f,10.0f));
bool firstMouse = false;
double lastX = SCREEN_WIDTH / 2.0f;
double lastY = SCREEN_HEIGHT / 2.0f;

glm::vec3 lightPos = glm::vec3(2.0f, 0.0f, -2.0f);

int main() {
	//******************************BOILER PLATE**************************
	if (!glfwInit()) {
		cout << "GLFW Initialization Failed!" << endl;
		return -1;
	}

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);

	
	GLFWwindow* window;
	window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Yousuf Window", NULL, NULL);
	if (!window) {
		glfwTerminate();
		return -1;
	}
	glfwSwapInterval(1);

	glfwMakeContextCurrent(window);

	if (glewInit() != GLEW_OK) {
		cout << "GLEW Initialization Failed!" << endl;
		return -1;
	}

	cout << "OPENGL Version : " << glGetString(GL_VERSION) << endl;


	//******************************BOILER PLATE***************************
	
	GLfloat positions[] = {
	-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

	-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,

	-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

	-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
	};

	VertexArray cubeVAO;
	VertexBuffer cubeVB(positions,6 * 6 * 6 * sizeof(float));
	MyShader cubeShader("resources/shaders/test2.shader");
	VertexBufferLayout cubeLayout;
	cubeLayout.Push<float>(3);
	cubeLayout.Push<float>(3);
	cubeVAO.AddBuffer(cubeVB, cubeLayout);

	VertexArray lightVAO;
	VertexBufferLayout lightCubeLayout;
	MyShader lightCubeShader("resources/shaders/lightCube.shader");
	lightCubeLayout.Push<float>(3);
	lightCubeLayout.Push<float>(3);
	lightVAO.AddBuffer(cubeVB, lightCubeLayout);


	camera.initMouse(window);
	glfwSetCursorPosCallback(window, mouseCallback);
	glfwSetScrollCallback(window, scrollCallback);

	glEnable(GL_DEPTH_TEST);
	

	while (!glfwWindowShouldClose(window)) {
		processInput(window);
		
		camera.getDeltaTimeStamp();

		GLCALL(glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT));

		glm::mat4 model = glm::mat4(1.0f);
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 0.0f));
		glm::mat4 view = camera.getViewMatrix();
		glm::mat4 proj = glm::perspective(glm::radians(camera.zoom), (float)SCREEN_WIDTH / (float)SCREEN_HEIGHT, 0.1f, 100.0f);
		cubeShader.Bind();
		cubeVAO.Bind();
		cubeVB.Bind();
		cubeShader.SetUniformMat4fv("model", model);
		cubeShader.SetUniformMat4fv("view", view);
		cubeShader.SetUniformMat4fv("proj", proj);
		cubeShader.SetUniform3f("lightColor", 1.0f, 1.0f,1.0f);
		cubeShader.SetUniform3f("cubeColor", 1.0f, 0.5f, 0.31f);
		//cubeShader.SetUniform3f("lightPos", 2.5f, 0.0f, -2.5f);
		cubeShader.SetUniformVEC3("lightPos", lightPos);
		cubeShader.SetUniformVEC3("viewPos", camera.Position);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 cubemodel = glm::mat4(1.0f);
		cubemodel = glm::translate(cubemodel, lightPos);
		cubemodel = glm::scale(cubemodel, glm::vec3(0.4f));
		lightCubeShader.Bind();
		lightVAO.Bind();
		cubeVB.Bind();
		lightCubeShader.SetUniformMat4fv("cubemodel", cubemodel);
		lightCubeShader.SetUniformMat4fv("view", view);
		lightCubeShader.SetUniformMat4fv("proj", proj);
		lightCubeShader.SetUniform3f("lightColor", 1.0f,1.0f,1.0f);

		glDrawArrays(GL_TRIANGLES, 0, 36);

		lightPos.x = glm::sin(glfwGetTime());
		lightPos.z = glm::cos(glfwGetTime());

		glfwSwapBuffers(window);
		glfwPollEvents();
	}


	glfwTerminate();
	return 0;

}

void processInput(GLFWwindow * window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
	camera.processWindowKeys(window);
}



void mouseCallback(GLFWwindow* window, double xpos, double ypos) {
	if (firstMouse) {            //for the first time to handle sudden jump
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}
	//now identify the offset since last  mouse change happened
	double xoffset = xpos - lastX;
	double yoffset = lastY - ypos;        //reversed since y coord go from bottom to top
	lastX = xpos;
	lastY = ypos;

	camera.processOffsetMovement(xoffset, yoffset);
}

void scrollCallback(GLFWwindow* window, double xoffset, double yoffset) {
	camera.processOffsetScroll(yoffset);
}

//lightcubeshader
#shader vertex
#version 330 core
layout(location = 0) in vec3 position;

uniform mat4 cubemodel;
uniform mat4 view;
uniform mat4 proj;

void main() {
	gl_Position = proj * view * cubemodel * vec4(position, 1.0);
}

#shader fragment
#version 330 core
layout(location = 0) out vec4 color;
uniform vec3 lightColor;

void main() {
	color = vec4(lightColor,1.0);
}

//test2shader
#shader vertex
#version 330 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;

out vec3 Normal;
out vec3 FragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

void main(){
	gl_Position = proj * view * model * vec4(position,1.0);
	FragPos = vec3(model * vec4(position,1.0));
	Normal = normal;
}




#shader fragment
#version 330 core
layout(location = 0) out vec4 fragColor;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 cubeColor;
uniform vec3 lightColor;

void main(){
	float ambientStrength = 0.2;
	vec3 ambient = ambientStrength * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(lightDir, norm), 0);
	vec3 diffuse = diff * lightColor;

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	float specularStrength = 0.5;
	vec3 specular = specularStrength * spec * lightColor;


	vec3 result  = (ambient + diffuse + specular) * cubeColor;
	fragColor = vec4(result, 1.0);
};
##################################################